//
//  UIView+Night.m
//  UIView+Night
//
//  Copyright (c) 2015 Draveness. All rights reserved.
//
//  These files are generated by ruby script, if you want to modify code
//  in this file, you are supposed to update the ruby code, run it and
//  test it. And finally open a pull request.

#import "UIView+Night.h"
#import "DKNightVersionManager.h"
#import <objc/runtime.h>

@interface UIView ()



@end

@implementation UIView (Night)


- (DKColorPicker)dk_backgroundColorPicker {
    return objc_getAssociatedObject(self, @selector(dk_backgroundColorPicker));
}

- (void)dk_setBackgroundColorPicker:(DKColorPicker)picker {
    objc_setAssociatedObject(self, @selector(dk_backgroundColorPicker), picker, OBJC_ASSOCIATION_COPY_NONATOMIC);
    if (picker) {
        self.backgroundColor = picker(self.targetThemeVersion);
    }
    [self.pickers setValue:[picker copy] forKey:@"setBackgroundColor:"];
}

- (DKColorPicker)dk_tintColorPicker {
    return objc_getAssociatedObject(self, @selector(dk_tintColorPicker));
}

- (void)dk_setTintColorPicker:(DKColorPicker)picker {
    objc_setAssociatedObject(self, @selector(dk_tintColorPicker), picker, OBJC_ASSOCIATION_COPY_NONATOMIC);
    if (picker) {
        self.tintColor = picker(self.targetThemeVersion);
    }
    [self.pickers setValue:[picker copy] forKey:@"setTintColor:"];
}


#pragma mark - 方法交换
+ (void)load
{
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        [self swizzleInstanceMethod:@selector(didMoveToWindow) with:@selector(dk_didMoveToWindow)];
    });
}

- (void)dk_didMoveToWindow
{
    [self dk_didMoveToWindow];
    
    if (self.window) {
        [self dk_addColorChangeNoti];
        // 被加到父控件上的时候 如果父控件限定了颜色模式 子控件按需跟随
        if (self.superview.enableThemeVersion && !self.igonreSuperColorMode) {
            self.enableThemeVersion = self.superview.enableThemeVersion;
        }
        [self night_updateColor];
    } else {
        [self dk_removeColorChangeNoti];
    }
}

+ (BOOL)swizzleInstanceMethod:(SEL)originalSel with:(SEL)newSel {
    Method originalMethod = class_getInstanceMethod(self, originalSel);
    Method newMethod = class_getInstanceMethod(self, newSel);
    if (!originalMethod || !newMethod) return NO;
    
    class_addMethod(self,
                    originalSel,
                    class_getMethodImplementation(self, originalSel),
                    method_getTypeEncoding(originalMethod));
    class_addMethod(self,
                    newSel,
                    class_getMethodImplementation(self, newSel),
                    method_getTypeEncoding(newMethod));
    
    method_exchangeImplementations(class_getInstanceMethod(self, originalSel),
                                   class_getInstanceMethod(self, newSel));
    return YES;
}


@end
